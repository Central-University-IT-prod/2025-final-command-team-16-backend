services:
  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES__DATABASE}
      POSTGRES_USER: ${POSTGRES__USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db_net
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    restart: always
    environment:
      REDIS_PORT: ${REDIS__PORT}
      REDIS_DATABASES: 16
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - cache_net
    volumes:
      - redis_data:/var/lib/redis/data

  backend:
    build:
      context: .
      args:
        SERVER__HOST: 0.0.0.0
        SERVER__PORT: 8080
    ports:
      - "80:8080"
    environment:
      MAIL__USERNAME: "some_username"
      MAIL__PASSWORD: "secret"
      MAIL__FROM_EMAIL: "some_email@mail.com"
      MAIL__FROM_NAME: "some_name"
      MAIL__PORT: "1017"
      MAIL__SERVER: "smtp.mail.ru"

      POSTGRES__USERNAME: "postgres"
      POSTGRES__PASSWORD: "password"
      POSTGRES__HOST: "postgres"
      POSTGRES__DATABASE: "api_db"
      POSTGRES__PORT: "5432"
      POSTGRES__ECHO: "0"

      REDIS__HOST: "redis"
      REDIS__PORT: "6379"
      REDIS__DATABASE: "0"

      MODE: "prod"

      SERVER__URL: "http://some-url.ru"
      SERVER__HOST: "0.0.0.0"
      SERVER__PORT: "8080"
      SERVER__COOKIE_MAX_AGE_MINUTES: "3600"
      SERVER__RESET_PASSWORD_TOKEN: "secret"
      SERVER__VERIFICATION_TOKEN: "secret"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - db_net
      - cache_net
  frontend:
    image: front:latest
    ports:
      - "3000:3000"
    depends_on:
      - backend

networks:
  db_net:
    driver: bridge
  cache_net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
